#! /bin/bash

VERSION="v0.4"

# TODO: Fix after lua-yajl will become a rock
LUA_YAJL_BUILD_DIR="/usr/local/share/lua/cmod/"

# Detect Lua interpreter (prefer LuaJIT 2)
if [ ! -z "${LUA}" ]; then
  if [ -z "$(which ${LUA})" ]; then
    LUA=""
  fi
fi

if [ -z "${LUA}" ]; then
  LUA="luajit2"
  if [ -z "$(which ${LUA})" ]; then
    LUA="luajit"
    if [ -z "$(which ${LUA})" ]; then
      LUA="lua"

      if [ -z "$(which ${LUA})" ]; then
        echo "Error: luajit2, luajit and lua executables not found" >&2
        exit 1
      fi
    fi
  fi
fi

function version()
{
  cat << EOF
JSON to Lua translator ${VERSION}

EOF
}

function usage()
{
  cat << EOF
Usage:

  $0 [options] < in.json > out.lua

Options:

  -h    Print this text
  -v    Print script version
  -n    Do not pretty-print Lua code (default: do pretty-print)
  -wN   Set maximum pretty-print width to N chars (default: 80)
  -iStr Set pretty-print indent to string (default: two spaces, '  ')
  -N    Force object keys to be transformed to numbers
        whenever possible (default: off)
  -e    Do not print terminating EOL (default: do print)
  -r    Prefix data with 'return' (default: off)

EOF
}

NO_PRETTY_PRINT=false
MAX_WIDTH=80
INDENT_STR="  "
FORCE_NUM_KEYS=false
SKIP_TERMINATING_EOL=false
PREFIX_WITH_RETURN=false

while getopts ":hvnw:i:Ner" opt; do
  case ${opt} in
    h)
      version
      usage
      exit 0
      ;;
    v)
      version
      exit 0
      ;;
    n)
      NO_PRETTY_PRINT=true
      ;;
    w)
      MAX_WIDTH="${OPTARG}"
      ;;
    i)
      INDENT_STR="${OPTARG}"
      ;;
    N)
      FORCE_NUM_KEYS=true
      ;;
    e)
      SKIP_TERMINATING_EOL=true
      ;;
    r)
      PREFIX_WITH_RETURN=true
      ;;
    \?)
      echo "unknown option: -${OPTARG}" >&2
      exit 1
      ;;
    :)
      echo "option -${OPTARG} requires an argument" >&2
      exit 1
      ;;
  esac
done

${LUA} -e "

local NO_PRETTY_PRINT = ${NO_PRETTY_PRINT}
local MAX_WIDTH = ${MAX_WIDTH}
local INDENT_STR = '${INDENT_STR}'
local FORCE_NUM_KEYS = ${FORCE_NUM_KEYS}
local SKIP_TERMINATING_EOL = ${SKIP_TERMINATING_EOL}
local PREFIX_WITH_RETURN = ${PREFIX_WITH_RETURN}

--------------------------------------------------------------------------------

pcall(require, 'luarocks.require') -- Ignoring errors

local decode_json
do
  package.cpath = '${LUA_YAJL_BUILD_DIR}' .. '?.so;' .. package.cpath

  local yajl_found, yajl = pcall(require, 'yajl')
  if not yajl_found then
    local err = yajl
    io.stdout:write(
        'error: ',
        err, '\n\n',
        'try running \'sudo apt-get install yajl\'', '\n'
      )
    io.stdout:flush()
    os.exit(1)
  end

  decode_json = yajl.to_value

  if FORCE_NUM_KEYS then

    local postprocess
    do
      postprocess = function(data)
        if data == yajl.null then
          return nil
        end

        if type(data) ~= 'table' then
          return data
        end

        local result = {}
        for k,v in pairs(data) do
          result[k] = postprocess(v)
        end

        return result
      end
    end

    decode_json = function(string)
        local result
        local stack = {
            function(val) result = val end
        }
        local obj_key
        local events = {
            value = function(_, val)
                stack[#stack](val)
            end,
            open_array = function()
                local arr = {}
                stack[#stack](arr)
                table.insert(stack, function(val)
                    table.insert(result, val)
                end)
            end,
            open_object = function()
                local obj = {}
                stack[#stack](obj)
                table.insert(stack, function(val)
                    obj[obj_key] = val
                end)
            end,
            object_key = function(_, val)
                local val_as_number = tonumber(val)
                if val_as_number then
                  obj_key = val_as_number
                else
                  obj_key = val
                end
            end,
            close = function()
                stack[#stack] = nil
            end,
        }

        yajl.parser({ events = events })(string)

        return postprocess(result)
    end

  end
end

--------------------------------------------------------------------------------

do -- Bootstrap lua-nucleo
  local res, err = pcall(require, 'lua-nucleo.module')
  if not res then
    io.stdout:write(
        'error: ',
        err,
        '\n\n',
        'try running \'luarocks install lua-nucleo\'',
        '\n'
      )
    io.stdout:flush()
    os.exit(1)
  end

  require('lua-nucleo.strict')
end

--------------------------------------------------------------------------------

local input = assert(io.stdin:read('*a'))

local data, err = decode_json(input)
if err then
  error('lua-yajl error: ' .. err)
end

if PREFIX_WITH_RETURN then
  io.stdout:write('return ')
end

if NO_PRETTY_PRINT or type(data) ~= 'table' then
  local tstr = import 'lua-nucleo/tstr.lua' { 'tstr' }
  io.stdout:write(tstr(data))
else
  local tpretty = import 'lua-nucleo/tpretty.lua' { 'tpretty' }
  io.stdout:write(tpretty(data, INDENT_STR, MAX_WIDTH))
end

if not SKIP_TERMINATING_EOL then
  io.stdout:write('\n')
end

io.stdout:flush()

"
